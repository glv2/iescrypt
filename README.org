#+TITLE: iescrypt

The *iescrypt* program is a tool to encrypt, decrypt and sign files.
There are two versions of it, one is written in Common Lisp, the other
is written in C.

* Common Lisp version

The Common Lisp version can be used either as a library or as
a standalone executable.

** Dependencies

[[http://www.sbcl.org/][sbcl]] as Common Lisp implementation is recommended.
It also works with other implementations, but much more slowly.

*** Libraries

- [[http://www.cliki.net/Archive][archive]]
- [[http://www.cliki.net/Babel][babel]]
- [[http://cliki.net/Ironclad][ironclad]]

These libraries can be installed easily with [[http://www.quicklisp.org][quicklisp]].

** Examples

#+BEGIN_SRC lisp
(asdf:load-system "iescrypt")
(in-package iescrypt)
#+END_SRC

Encrypt and decrypt a file with a passphrase:

#+BEGIN_SRC lisp
(encrypt-file-with-passphrase "clear.file" "cipher.file")
(decrypt-file-with-passphrase "cipher.file" "clear.file")
#+END_SRC

Encrypt and decrypt a file with a key pair:

#+BEGIN_SRC lisp
(make-encryption-key-pair "key")
(encrypt-file-with-key "clear.file" "cipher.file" "key.pub")
(decrypt-file-with-key "cipher.file" "clear.file" "key")
#+END_SRC

Sign and verify a file:

#+BEGIN_SRC lisp
(make-signing-key-pair "key")
(sign-file "some.file" "some.file.sig" "key")
(verify-file-signature "some.file" "some.file.sig" "key.pub")
#+END_SRC

Simultaneously sign and encrypt a file:

#+BEGIN_SRC lisp
(make-encryption-key-pair "enckey")
(make-signing-key-pair "sigkey")
(sign-and-encrypt-file-with-key "clear.file" "cipher.file" "sigkey" "enckey.pub")
(decrypt-file-with-key-and-verify-signature "cipher.file" "clear.file" "enckey" "sigkey.pub")
#+END_SRC

** Standalone executable

You can build a standalone executable using the Makefile.

#+BEGIN_SRC shell
make iescrypt
#+END_SRC

** Tests

The tests require the [[https://common-lisp.net/project/fiveam/][fiveam]] library.

#+BEGIN_SRC lisp
(asdf:test-system "iescrypt")
#+END_SRC

There is also a /test.sh/ shell script in the /tests/ directory to
test the standalone executable.

#+BEGIN_SRC shell
tests/test.sh
#+END_SRC

* C version

The C version can be used as a standalone executable.
It includes Loup Vaillant's [[https://github.com/LoupVaillant/Monocypher][monocypher]] library for cryptographic
primitives and rxi's [[https://github.com/rxi/microtar][microtar]] library to deal with tar archives.

** Dependencies

A C compiler.

** Standalone executable

You can build the standalone executable using the Makefile.

#+BEGIN_SRC shell
make iescrypt-c
#+END_SRC

** Tests

There is a /test-c.sh/ shell script in the /tests/ directory to
test the standalone executable.

#+BEGIN_SRC shell
tests/test-c.sh
#+END_SRC

* Commands of the standalone executable

#+BEGIN_SRC shell
Usage: iescrypt <command> <arguments>
#+END_SRC

** Commands
*** gen-enc <file>

Generate a key pair for encryption. The private key is written
to 'file' and the public key is written to 'file.pub'.

*** gen-sig <file>

Generate a key pair for signature. The private key is written
to 'file' and the public key is written to 'file.pub'.

*** enc <input file> <output file> <public key file>

Encrypt a file with a public key.

*** dec <input file> <output file> <private key file>

Decrypt a file that was encrypted with a public key using
the matching private key.

*** penc <input file> <output file> [passphrase file]

Encrypt a file using a passphrase.

*** pdec <input file> <output file> [passphrase file]

Decrypt a file using a passphrase.

*** sig <input file> <signature file> <private key file>

Sign a file with a private key.

*** ver <input-file> <signature-file> [public key file]

Verify a signature of a file.
If a public key file is specified, also verify that the signature
was made with the matching private key.

*** sig-enc <input file> <output file> <signature private key file> <encryption public key file>

Sign a file with a private key and encrypt the file and the signature
with a public key.

*** dec-ver <input file> <output file> <encryption private key file> [signature public key file]

Decrypt a file with a private key and verify that it has a valid
signature. If a signature public key is specified, also verify that
the signature was made with the matching private key.

*** sig-penc <input file> <output file> <signature private key file> [passphrase file]

Sign a file with a private key and encrypt the file and the signature
with a passphrase.

*** pdec-ver <input file> <output file> [passphrase file [signature public key file]]

Decrypt a file with a passphrase and verify that it has a valid
signature. If a signature public key is specified, also verify that
the signature was made with the matching private key.

* Details
** Algorithms

The program uses the integrated encryption scheme with the following
parameters:
 - xchacha cipher for data encryption
 - poly1305 for message authentication code
 - x25519 (curve25519) or passphrase and argon2i to derive keys

The program can also sign files using eddsa (ed25519). The signature
is made on the blake2 hash of the input file.

** File format

Encrypted files have the following format:

#+BEGIN_EXAMPLE
+-----------------+----------------------+----------------+------------+
| salt (16 bytes) | parameter (32 bytes) | mac (16 bytes) | ciphertext |
+-----------------+----------------------+----------------+------------+
#+END_EXAMPLE

** Encryption process

A random salt is generated.

A shared secret is computed. It is either a passphrase or the result
of a Diffie-Hellman exchange with curve25519 keys.
The /parameter/ field of the encrypted file contains either unused
random data if the encryption is done with a passphrase, or
a curve25519 public key allowing the recipient to compute the shared
secret if the encryption is done with curve25519 keys.

The key and nonce for xchacha and the key for poly1305 are derived
from the salt and the shared secret using argon2i.

The cleartext is encrypted with xchacha.

The message authentication code is computed on the ciphertext using
poly1305.

When using a command to simultaneously sign and encrypt a file, the
encryption is done on a tar file containing the input file and the
signature of the input file.

=iescrypt sig-enc input output signature-key encryption-key.pub= is
equivalent to:

#+BEGIN_SRC shell
iescrypt sig input input.sig signature-key
tar -c -f input.tar input input.sig
iescrypt enc input.tar output encryption-key.pub
rm input.sig input.tar
#+END_SRC

=iescrypt dec-ver output input encryption-key signature-key.pub= is
equivalent to:

#+BEGIN_SRC shell
iescrypt-c dec output input.tar encryption-key
tar -x -f input.tar
iescrypt-c ver input input.sig signature-key.pub
rm input.sig input.tar
#+END_SRC
